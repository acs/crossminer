[%import "javautil.eol";%]
[%import "ecoreutil.eol";%]
[%import "wadlutil.eol";%]
[%
	// TODO: Package
%]

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.List;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.type.TypeFactory;

public class OssmeterClient {
	final String connectionUrl;
	final ObjectMapper mapper;
	
	public OssmeterClient(String connectionUrl) throws Exception {
		this.connectionUrl = connectionUrl;
		mapper = new ObjectMapper();
		
		// Test connection
		URL url = new URL(connectionUrl);
		HttpURLConnection conn = (HttpURLConnection) url.openConnection();
		conn.setRequestMethod("GET");
		if (conn.getResponseCode() != 200) {
			conn.disconnect();
			throw new Exception("Unable to connect to OSSMETER REST API. Check URL.");
		}
		conn.disconnect();
	}
	[%
	w.children.println();
	w.children.select(c | c.tagName == "resources").at(0).println();
	/*
	Issues: methods: m.s_name.at(0) -- thinks everything is a sequence?????
	*/
	%]
	[%for (resource in w.c_resources.c_resource) {
		generateResource(resource);
	}
	%]
	
	public String makeRequest(String urlString) throws Exception {
		URL url = new URL(urlString);
		HttpURLConnection conn = (HttpURLConnection) url.openConnection();
		conn.setRequestMethod("GET");
		conn.setRequestProperty("Accept", "application/json");
		
		conn.connect();
		
		if (conn.getResponseCode() != 200) {
			throw new RuntimeException("Failed : HTTP error code : " + conn.getResponseCode());
		}
		
		BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
		
		StringBuffer sb = new StringBuffer();
		
		String output;
		while ((output = br.readLine()) != null) {
			sb.append(output);
		}
		conn.disconnect();
		
		return sb.toString();
	}
	
	/**
	 *	This is a test method to ensure that the generated client works ok.
	 */
	public static void main(String[] args) throws Exception{
		OssmeterClient c = new OssmeterClient("http://localhost:1234");
		
		System.out.println(c.getProjectList());
		
		Project p = c.getProject("epsilon");
		Metric m2 = c.getMetric(p.getShortName(), "activeusersperday");
		
	}
}
[%operation generateResource(resource : Any) {
	for (method in resource.c_method.select(m | m.s_name.at(0)=="GET").flatten()) { %]
	public [%=method.getResultType()%] get[%=method.getName()%]([%=method.getArguments()%]) throws Exception {
		String result = makeRequest(connectionUrl + "[%=method.getUrl()%]");
		return mapper.readValue(result, [%=method.getMapperResultType()%]);
	}
	[%for (res in resource.c_resource) {
		generateResource(res);
	}%]
	[%}%]
[%}%]