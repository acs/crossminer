[%import "javautil.eol";%]
[%import "ecoreutil.eol";%]
//package [%=c.ePackage.name%];

import java.util.*;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonSubTypes.Type;

@JsonTypeInfo(use=JsonTypeInfo.Id.NAME,
	include=JsonTypeInfo.As.PROPERTY,
	property = "_type")
@JsonSubTypes({
	[%for (sub in OSS!EClass.all.select(s | s.eSuperTypes.includes(c) and not s.isIgnored())) {%]
		@Type(value = [%=sub.name%].class, name="[%=sub.name%]"),
	[%}%]
})
public[%=c.getAbstractModifier()%] class [%=c.name%] extends [%=c.getJavaExtends()%] {

	[%for (sf in c.eStructuralFeatures.select(sf|sf.isMany and not sf.eType.isIgnored())) { /**/ %]
	protected List<[%=sf.eType.getJavaBoxedName()%]> [%=sf.name%];
	[%}%]
	[%c.name.println(); for (r in c.eStructuralFeatures.select(r|not r.isMany and not r.eType.println().isIgnored())) { /**/%]
	protected [%=r.eType.getJavaName()%] [%=r.name%];
	[%}%]
	
	[%for (a in c.eAttributes.select(a|not a.isMany)) { %]
	public [%=a.eType.getJavaName()%] get[%=a.name.ftuc()%]() {
		return [%=a.name%];
	}
	[%}	%]
	
	[%for (a in c.eStructuralFeatures.select(a|a.isMany)) { %]
	public List<[%=a.eType.getJavaBoxedName()%]> get[%=a.name.ftuc()%]() {
		return [%=a.name%];
	}
	[%}%]
}
